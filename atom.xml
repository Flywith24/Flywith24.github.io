<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨云召 | 博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-29T09:42:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨云召</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【重学Android读书笔记】Activity的任务栈与返回栈</title>
    <link href="http://yoursite.com/2019/11/29/%E3%80%90%E9%87%8D%E5%AD%A6Android%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91Activity%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%A0%88%E4%B8%8E%E8%BF%94%E5%9B%9E%E6%A0%88/"/>
    <id>http://yoursite.com/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/</id>
    <published>2019-11-29T09:42:00.000Z</published>
    <updated>2019-11-29T09:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>订阅 <a href="https://xiaozhuanlan.com/topic/9074561823" target="_blank" rel="noopener">重学安卓</a> 很久了，最近在整理读书笔记，在此记录之。</p><p>在此隆重推荐这位大佬 KunMinX</p><p>本文记录Activity任务栈与返回栈相关内容的疑问与探索</p></blockquote><a id="more"></a><p>该专栏的代码地址： <a href="https://github.com/KunMinX/Relearn-Android" target="_blank" rel="noopener">https://github.com/KunMinX/Relearn-Android</a> </p><h4 id="疑惑产生"><a href="#疑惑产生" class="headerlink" title="疑惑产生"></a>疑惑产生</h4><p>根据大佬的代码以及文章描述，有个地方让我很疑惑。</p><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/%E9%97%AE%E9%A2%98.png" alt="问题"></p><p>我这里没有过滤当前使用的app，所以app1和app2产生的日志都显示了出来。</p><p>大佬在评论区关于此的回答</p><blockquote><p><a href="https://xiaozhuanlan.com/u/kunminx" target="_blank" rel="noopener">KunMinX</a></p><p>#40</p><p><a href="https://xiaozhuanlan.com/topic/7812045693#reply2" target="_blank" rel="noopener">#2楼</a> <a href="https://xiaozhuanlan.com/u/2711412979" target="_blank" rel="noopener"><em>@</em>Sky63</a><br>大概明白你提到的、造成困扰的地方了。<br>D 和 C 是由 app1 启动，在 IDE 中可通过 app1 的视角观察到。同理，当 app2 的 B 唤起 D 时，你在回退 D 的时候能在 app2 和 app1 的视角中同时观察到 D 的销毁。而紧随其后再回退一次， 便能在 app1 中观察到 C 被销毁。再下一次才轮到 app2 中 B 被销毁。</p></blockquote><p>但是根据我操作看到的现象，D的销毁不是在不同app视角观察到的同一次销毁。通过上图可以看出两次销毁是有时间差的，而且经过我的二次确认，的确是关闭两次界面才出现了两次销毁Log。</p><h4 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h4><p>通过 <code>adb shell</code> 中的 <code>dumpsys activity activities</code> 命令可以查看 activity 栈信息，故我截取了相关的输出，以下堆栈信息均经过精简。</p><h5 id="1-app1-依次打开-SingleTaskOne-SingleTaskTwo"><a href="#1-app1-依次打开-SingleTaskOne-SingleTaskTwo" class="headerlink" title="1. app1 依次打开 SingleTaskOne SingleTaskTwo"></a>1. <code>app1</code> 依次打开 <code>SingleTaskOne</code> <code>SingleTaskTwo</code></h5><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log1.png" alt="log1"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">➜  Relearn-Android (master) adb shell</span><br><span class="line">sagit:/ $ dumpsys activity activities</span><br><span class="line">ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)</span><br><span class="line">Display #0 (activities from top to bottom):</span><br><span class="line"></span><br><span class="line">  Stack #2: type=standard mode=fullscreen</span><br><span class="line">    Task id #3</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;4920da #3 A=com.kunminx.task.c U=0 StackId=2 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;93c0c72 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;999111 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t3&#125;</span><br><span class="line"></span><br><span class="line">    mResumedActivity: ActivityRecord&#123;93c0c72 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;999111 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t3&#125;</span><br><span class="line"></span><br><span class="line">  Stack #1: type=standard mode=fullscreen</span><br><span class="line">    Task id #2</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;d91b3e8 #2 A=com.kunminx.relearn_android U=0 StackId=1 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;8b59240 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;d76e9a5 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.TestMainActivity t2&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;8b59240 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line"></span><br><span class="line">  Stack #0: type=home mode=fullscreen</span><br><span class="line"></span><br><span class="line">    Task id #1</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;94a7a01 #1 I=com.miui.home/.launcher.Launcher U=0 StackId=0 sz=1&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;7d6409 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;7d6409 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">  ResumedActivity:ActivityRecord&#123;</span><br><span class="line">93c0c72u0com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">  </span><br><span class="line">  mFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks</span><br><span class="line">  &#125; </span><br><span class="line">  mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks</span><br><span class="line">  &#125;</span><br><span class="line">  mCurTaskIdForUser=&#123;0=3&#125;</span><br><span class="line">  mUserStackInFront=&#123;&#125;</span><br><span class="line">  displayId=0 stacks=3</span><br><span class="line">   mHomeStack=ActivityStack&#123;</span><br><span class="line">   76ebae7 stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks</span><br><span class="line">   &#125;</span><br><span class="line">  isHomeRecentsComponent=false  KeyguardController:</span><br><span class="line">    mKeyguardShowing=false</span><br><span class="line">    mAodShowing=false</span><br><span class="line">    mKeyguardGoingAway=false</span><br><span class="line">    mOccluded=false</span><br><span class="line">    mDismissingKeyguardActivity=null</span><br><span class="line">    mDismissalRequested=false</span><br><span class="line">    mVisibilityTransactionDepth=0</span><br><span class="line">  LockTaskController</span><br><span class="line">    mLockTaskModeState=NONE</span><br><span class="line">    mLockTaskModeTasks=</span><br><span class="line">    mLockTaskPackages (userId:packages)=</span><br><span class="line">      u0:[]</span><br></pre></td></tr></table></figure><p>此时看到堆栈顺序为：<strong>Stack #2 -&lt; Stack #1 -&lt; Stack #0</strong> 其中 <code>Stack #0</code> 为 <code>launcher</code></p><p>获取焦点的 <code>ActivityStack</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125; </span><br><span class="line">mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br></pre></td></tr></table></figure><h5 id="2-按下HOME键，打开-app2-依次打开-StandardOneActivity-StandardTwoActivity"><a href="#2-按下HOME键，打开-app2-依次打开-StandardOneActivity-StandardTwoActivity" class="headerlink" title="2. 按下HOME键，打开 app2 依次打开 StandardOneActivity StandardTwoActivity"></a>2. 按下HOME键，打开 <code>app2</code> 依次打开 <code>StandardOneActivity</code> <code>StandardTwoActivity</code></h5><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log2.png" alt="log2"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Display #0 (activities from top to bottom):</span><br><span class="line"></span><br><span class="line">  Stack #3: type=standard mode=fullscreen</span><br><span class="line">    Task id #4</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;718157f #4 A=com.kunminx.relearn_android_2 U=0 StackId=3 sz=4&#125;</span><br><span class="line">        Run #3: ActivityRecord&#123;137a584 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t4&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;648188e u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t4&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;f39ebe9 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t4&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;f02fff8 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.TestMainActivity t4&#125;</span><br><span class="line"></span><br><span class="line">    mResumedActivity: ActivityRecord&#123;137a584 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t4&#125;</span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;648188e u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t4&#125;</span><br><span class="line"></span><br><span class="line">  Stack #0: type=home mode=fullscreen</span><br><span class="line">    Task id #1</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;2094d95 #1 I=com.miui.home/.launcher.Launcher U=0 StackId=0 sz=1&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;a7fed1a u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;a7fed1a u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">  Stack #2: type=standard mode=fullscreen</span><br><span class="line">    Task id #3</span><br><span class="line">    </span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;9d79eaa #3 A=com.kunminx.task.c U=0 StackId=2 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;15d3e09 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;20d177c u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t3&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;15d3e09 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line"></span><br><span class="line">  Stack #1: type=standard mode=fullscreen</span><br><span class="line">  isSleeping=false</span><br><span class="line">  mBounds=Rect(0, 0 - 0, 0)</span><br><span class="line"></span><br><span class="line">    Task id #2</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;e526e38 #2 A=com.kunminx.relearn_android U=0 StackId=1 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;19055b2 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;5a647a6 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.TestMainActivity t2&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;19055b2 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line"></span><br><span class="line">  ResumedActivity: ActivityRecord&#123;137a584 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t4&#125;</span><br><span class="line"></span><br><span class="line">  mFocusedStack=ActivityStack&#123;</span><br><span class="line">      dfe2e11 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125; </span><br><span class="line">mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">    dfe2e11 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mCurTaskIdForUser=&#123;0=4&#125;</span><br><span class="line">  mUserStackInFront=&#123;&#125;</span><br><span class="line">  displayId=0 stacks=4</span><br><span class="line">   mHomeStack=ActivityStack&#123;968fb76 stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks&#125;</span><br><span class="line">  isHomeRecentsComponent=false  KeyguardController:</span><br><span class="line">    mKeyguardShowing=false</span><br><span class="line">    mAodShowing=false</span><br><span class="line">    mKeyguardGoingAway=false</span><br><span class="line">    mOccluded=false</span><br><span class="line">    mDismissingKeyguardActivity=null</span><br><span class="line">    mDismissalRequested=false</span><br><span class="line">    mVisibilityTransactionDepth=0</span><br><span class="line">  LockTaskController</span><br><span class="line">    mLockTaskModeState=NONE</span><br><span class="line">    mLockTaskModeTasks=</span><br><span class="line">    mLockTaskPackages (userId:packages)=</span><br><span class="line">      u0:[]</span><br></pre></td></tr></table></figure><p><strong>这里的堆栈顺序为 Stack #3 -&lt; Stack #0 -&lt; Stack #2 -&lt; Stack #1</strong></p><p><code>Stack #0</code> 为home ，这里反应出点击home键，打开app2 的操作。此时 <code>Stack #3</code> 中有 4 个 <code>ActivityRecord</code></p><p>当前获取焦点的 <code>ActivityStack</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  mFocusedStack=ActivityStack&#123;</span><br><span class="line">      dfe2e11 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125; </span><br><span class="line">mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">    dfe2e11 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mCurTaskIdForUser=&#123;0=4&#125;</span><br></pre></td></tr></table></figure><h5 id="3-接下来启动-SingleTaskTwoActivity"><a href="#3-接下来启动-SingleTaskTwoActivity" class="headerlink" title="3. 接下来启动 SingleTaskTwoActivity"></a>3. 接下来启动 <code>SingleTaskTwoActivity</code></h5><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log3.png" alt="log3"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">sagit:/ $ dumpsys activity activities</span><br><span class="line">ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)</span><br><span class="line">Display #0 (activities from top to bottom):</span><br><span class="line"></span><br><span class="line">  Stack #2: type=standard mode=fullscreen</span><br><span class="line">    Task id #3</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;4920da #3 A=com.kunminx.task.c U=0 StackId=2 sz=3&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;55f799d u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;93c0c72 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;999111 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t3&#125;</span><br><span class="line"></span><br><span class="line">    mResumedActivity: ActivityRecord&#123;55f799d u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line"></span><br><span class="line">  Stack #3: type=standard mode=fullscreen</span><br><span class="line">    Task id #4</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;f14a51a #4 A=com.kunminx.relearn_android_2 U=0 StackId=3 sz=4&#125;</span><br><span class="line">        Run #3: ActivityRecord&#123;1838862 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t4&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;bdb3180 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t4&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;7b21450 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t4&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;ff57abb u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.TestMainActivity t4&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;1838862 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t4&#125;</span><br><span class="line"></span><br><span class="line">  Stack #0: type=home mode=fullscreen</span><br><span class="line">    Task id #1</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;94a7a01 #1 I=com.miui.home/.launcher.Launcher U=0 StackId=0 sz=1&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;7d6409 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;7d6409 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">  Stack #1: type=standard mode=fullscreen</span><br><span class="line"></span><br><span class="line">    Task id #2</span><br><span class="line">        </span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;d91b3e8 #2 A=com.kunminx.relearn_android U=0 StackId=1 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;8b59240 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;d76e9a5 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.TestMainActivity t2&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;8b59240 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t2&#125;</span><br><span class="line"></span><br><span class="line">  ResumedActivity: ActivityRecord&#123;55f799d u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line"></span><br><span class="line">  mFocusedStack=ActivityStack&#123;</span><br><span class="line">    3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125; </span><br><span class="line">  mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">    3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mCurTaskIdForUser=&#123;0=4&#125;</span><br><span class="line"></span><br><span class="line">  mUserStackInFront=&#123;&#125;</span><br><span class="line">  displayId=0 stacks=4</span><br><span class="line">   mHomeStack=ActivityStack&#123;</span><br><span class="line">       76ebae7 stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks&#125;</span><br><span class="line">  isHomeRecentsComponent=false  KeyguardController:</span><br><span class="line">    mKeyguardShowing=false</span><br><span class="line">    mAodShowing=false</span><br><span class="line">    mKeyguardGoingAway=false</span><br><span class="line">    mOccluded=false</span><br><span class="line">    mDismissingKeyguardActivity=null</span><br><span class="line">    mDismissalRequested=false</span><br><span class="line">    mVisibilityTransactionDepth=0</span><br><span class="line">  LockTaskController</span><br><span class="line">    mLockTaskModeState=NONE</span><br><span class="line">    mLockTaskModeTasks=</span><br><span class="line">    mLockTaskPackages (userId:packages)=</span><br><span class="line">      u0:[]</span><br></pre></td></tr></table></figure><p><strong>当前的堆栈顺序 Stack #2 -&lt; Stack #3 -&lt; Stack #0 -&lt;Stack #1</strong></p><p>当前获取焦点的 <code>ActivityStack</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125; </span><br><span class="line">mLastFocusedStack=ActivityStack&#123;</span><br><span class="line">  3a870a6 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">mCurTaskIdForUser=&#123;0=4&#125;</span><br></pre></td></tr></table></figure><p><code>Stack #2</code> 中 <code>TaskRecord</code>信息为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TaskRecord&#123;4920da #3 A=com.kunminx.task.c U=0 StackId=2 sz=3&#125;</span><br><span class="line">  Run #2: ActivityRecord&#123;55f799d u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">  Run #1: ActivityRecord&#123;93c0c72 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t3&#125;</span><br><span class="line">  Run #0: ActivityRecord&#123;999111 u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t3&#125;</span><br></pre></td></tr></table></figure><h4 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h4><p><strong>关键的地方来了</strong></p><p>的确有两个 <code>SingleTaskTwoActivity</code> 的 <code>ActivityRecord</code> ，栈顶的属于 <code>app2</code> 第二个属于 <code>app1</code></p><p>由此看出这两个<code>ActivityRecord</code> 不是一个实例，所以这里 <code>app2</code> 启动的 <code>SingleTaskTwoActivity</code> 应该是 <code>app2</code> 自己的activity</p><p>废话不说，翻代码！这里截取了 <code>BaseTaskActivity</code> 中的部分代码，<code>app1</code> 和 <code>app2</code>中的 <code>activity</code> 都继承了<code>BaseTaskActivity</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = v.getId();</span><br><span class="line">        <span class="keyword">if</span> (i == R.id.btn_standard_one) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, StandardOneActivity.class);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.btn_standard_two) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, StandardTwoActivity.class);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.btn_singletask_one) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SingleTaskOneActivity.class);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.btn_singletask_two) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SingleTaskTwoActivity.class);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下测试结果证实：</span></span><br><span class="line">            <span class="comment">//1.在 App2 中启动 App1 的 standard Activity，仍然遵守 standard 的特点：在启动它的 Activity 所在的任务中启动，也即跟随 App2。</span></span><br><span class="line">            <span class="comment">//2.在 App2 中启动 App1 的 singleTop Activity，跟随状况同 standard。</span></span><br><span class="line">            <span class="comment">//3.在 App2 中启动 App1 的 singleTask Activity，仍然处于 App1 的任务中，并不跟随 App2。</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.btn_singletask_a) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            ComponentName name = <span class="keyword">new</span> ComponentName(</span><br><span class="line">                    <span class="string">"com.kunminx.relearn_android"</span>,</span><br><span class="line">                    <span class="string">"com.kunminx.relearn_android.SingleTaskAActivity"</span>);</span><br><span class="line">            intent.setComponent(name);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.btn_singletask_b) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            ComponentName name = <span class="keyword">new</span> ComponentName(</span><br><span class="line">                    <span class="string">"com.kunminx.relearn_android"</span>,</span><br><span class="line">                    <span class="string">"com.kunminx.relearn_android.SingleTaskBActivity"</span>);</span><br><span class="line">            intent.setComponent(name);</span><br><span class="line">            startActivityWithCheck(intent);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看出这里 <code>app2</code> 启动<code>SingleTaskTwoActivity</code> 的确是自己的 <code>activity</code></p><p><strong>那么它为什么和<code>app1</code> 中的  <code>SingleTaskTwoActivity</code>  是同一个 <code>TaskRecord</code> 呢？</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".test03_task_test.SingleTaskOneActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">"com.kunminx.task.c"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".test03_task_test.SingleTaskTwoActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">"com.kunminx.task.c"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>它们有着共同的 <code>taskAffinity</code>。至此，我的疑惑已经得到了答案。</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>我试了以下 <code>app2</code> 中启动 <code>app1</code> 中的Activity的情况</p><p><code>app1</code> 依次启动 <code>StandardOneActivity</code> -&lt; <code>SingleTaskOneActivity</code>  -&lt; <code>SingleTaskTwoActivity</code>  -&lt; <code>SingleTaskAActivity</code></p><p>其中 <code>SingleTaskOneActivity</code>  与 <code>SingleTaskTwoActivity</code> 设置了相同的 <code>taskAffinity</code> ,<code>StandardOneActivity</code> <code>与 SingleTaskAActivity</code> 未设置 <code>taskAffinity</code></p><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log4.png" alt="log4"></p><p>接着按 HOME 键，打开 <code>app2</code> ，依次打开 <code>StandardOneActivity</code> -&lt; <code>StandardOneActivity</code> -&lt; <code>StandardTwoActivity</code></p><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log5.png" alt="log5"></p><p>此时堆栈信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">➜  Relearn-Android (master) adb shell</span><br><span class="line">sagit:/ $ dumpsys activity activities</span><br><span class="line">ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)</span><br><span class="line">Display #0 (activities from top to bottom):</span><br><span class="line"></span><br><span class="line">  Stack #3: type=standard mode=fullscreen</span><br><span class="line">  isSleeping=false</span><br><span class="line">  mBounds=Rect(0, 0 - 0, 0)</span><br><span class="line">    Task id #48</span><br><span class="line"></span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;3b07175 #48 A=com.kunminx.relearn_android_2 U=0 StackId=3 sz=4&#125;</span><br><span class="line">        Run #3: ActivityRecord&#123;9cdafc6 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t48&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;83db884 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t48&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;71254 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t48&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;7c135cf u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.TestMainActivity t48&#125;</span><br><span class="line"></span><br><span class="line">    mResumedActivity: ActivityRecord&#123;9cdafc6 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t48&#125;</span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;83db884 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t48&#125;</span><br><span class="line"></span><br><span class="line">  Stack #0: type=home mode=fullscreen</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;185017b #1 I=com.miui.home/.launcher.Launcher U=0 StackId=0 sz=1&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;9fd4f88 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;9fd4f88 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">  Stack #1: type=standard mode=fullscreen</span><br><span class="line">    Task id #46</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;c374b98 #46 A=com.kunminx.relearn_android U=0 StackId=1 sz=3&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;5afc3da u0 com.kunminx.relearn_android/.SingleTaskAActivity t46&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;bb0363c u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t46&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;510711c u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.TestMainActivity t46&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;5afc3da u0 com.kunminx.relearn_android/.SingleTaskAActivity t46&#125;</span><br><span class="line"></span><br><span class="line">  Stack #2: type=standard mode=fullscreen</span><br><span class="line">    Task id #47</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;3387d6 #47 A=com.kunminx.task.c U=0 StackId=2 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;6375a1b u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t47&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;e9850ca u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t47&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;6375a1b u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t47&#125;</span><br><span class="line"></span><br><span class="line">  ResumedActivity: ActivityRecord&#123;9cdafc6 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t48&#125;</span><br><span class="line"></span><br><span class="line">  mFocusedStack=ActivityStack&#123;ed83a57 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mLastFocusedStack=ActivityStack&#123;ed83a57 stackId=3 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mCurTaskIdForUser=&#123;0=48&#125;</span><br><span class="line"></span><br><span class="line">  mUserStackInFront=&#123;&#125;</span><br><span class="line">  displayId=0 stacks=4</span><br><span class="line">   mHomeStack=ActivityStack&#123;a218944 stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks&#125;</span><br><span class="line">  isHomeRecentsComponent=false  KeyguardController:</span><br><span class="line">    mKeyguardShowing=false</span><br><span class="line">    mAodShowing=false</span><br><span class="line">    mKeyguardGoingAway=false</span><br><span class="line">    mOccluded=false</span><br><span class="line">    mDismissingKeyguardActivity=null</span><br><span class="line">    mDismissalRequested=false</span><br><span class="line">    mVisibilityTransactionDepth=0</span><br><span class="line">  LockTaskController</span><br><span class="line">    mLockTaskModeState=NONE</span><br><span class="line">    mLockTaskModeTasks=</span><br><span class="line">    mLockTaskPackages (userId:packages)=</span><br><span class="line">      u0:[]</span><br></pre></td></tr></table></figure><p>最后在 <code>app2</code> 中启动  <code>app1</code> 的 <code>SingleTaskAActivity</code> </p><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log6.png" alt="log6"></p><p>此时堆栈信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">➜  Relearn-Android (master) adb shell</span><br><span class="line">sagit:/ $ dumpsys activity activities</span><br><span class="line">ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)</span><br><span class="line">Display #0 (activities from top to bottom):</span><br><span class="line"></span><br><span class="line">  Stack #1: type=standard mode=fullscreen</span><br><span class="line">    Task id #46</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;c374b98 #46 A=com.kunminx.relearn_android U=0 StackId=1 sz=3&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;5afc3da u0 com.kunminx.relearn_android/.SingleTaskAActivity t46&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;bb0363c u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t46&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;510711c u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.TestMainActivity t46&#125;</span><br><span class="line"></span><br><span class="line">    mResumedActivity: ActivityRecord&#123;5afc3da u0 com.kunminx.relearn_android/.SingleTaskAActivity t46&#125;</span><br><span class="line"></span><br><span class="line">  Stack #3: type=standard mode=fullscreen</span><br><span class="line">    Task id #48</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;3b07175 #48 A=com.kunminx.relearn_android_2 U=0 StackId=3 sz=4&#125;</span><br><span class="line">        Run #3: ActivityRecord&#123;9cdafc6 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t48&#125;</span><br><span class="line">        Run #2: ActivityRecord&#123;83db884 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t48&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;71254 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardOneActivity t48&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;7c135cf u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.TestMainActivity t48&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;9cdafc6 u0 com.kunminx.relearn_android_2/com.kunminx.basicfacttesting.test03_task_test.StandardTwoActivity t48&#125;</span><br><span class="line"></span><br><span class="line">  Stack #0: type=home mode=fullscreen</span><br><span class="line">    Task id #1</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;185017b #1 I=com.miui.home/.launcher.Launcher U=0 StackId=0 sz=1&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;9fd4f88 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;9fd4f88 u0 com.miui.home/.launcher.Launcher t1&#125;</span><br><span class="line"></span><br><span class="line">  Stack #2: type=standard mode=fullscreen</span><br><span class="line">    Task id #47</span><br><span class="line">    Running activities (most recent first):</span><br><span class="line">      TaskRecord&#123;3387d6 #47 A=com.kunminx.task.c U=0 StackId=2 sz=2&#125;</span><br><span class="line">        Run #1: ActivityRecord&#123;6375a1b u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t47&#125;</span><br><span class="line">        Run #0: ActivityRecord&#123;e9850ca u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskOneActivity t47&#125;</span><br><span class="line"></span><br><span class="line">    mLastPausedActivity: ActivityRecord&#123;6375a1b u0 com.kunminx.relearn_android/com.kunminx.basicfacttesting.test03_task_test.SingleTaskTwoActivity t47&#125;</span><br><span class="line"></span><br><span class="line">  ResumedActivity: ActivityRecord&#123;5afc3da u0 com.kunminx.relearn_android/.SingleTaskAActivity t46&#125;</span><br><span class="line"></span><br><span class="line">  mFocusedStack=ActivityStack&#123;50922c2 stackId=1 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line">  mLastFocusedStack=ActivityStack&#123;50922c2 stackId=1 type=standard mode=fullscreen visible=true translucent=false, 1 tasks&#125;</span><br><span class="line"></span><br><span class="line">  mCurTaskIdForUser=&#123;0=48&#125;</span><br><span class="line">  mUserStackInFront=&#123;&#125;</span><br><span class="line">  displayId=0 stacks=4</span><br><span class="line">   mHomeStack=ActivityStack&#123;a218944 stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks&#125;</span><br><span class="line">  isHomeRecentsComponent=false  KeyguardController:</span><br><span class="line">    mKeyguardShowing=false</span><br><span class="line">    mAodShowing=false</span><br><span class="line">    mKeyguardGoingAway=false</span><br><span class="line">    mOccluded=false</span><br><span class="line">    mDismissingKeyguardActivity=null</span><br><span class="line">    mDismissalRequested=false</span><br><span class="line">    mVisibilityTransactionDepth=0</span><br><span class="line">  LockTaskController</span><br><span class="line">    mLockTaskModeState=NONE</span><br><span class="line">    mLockTaskModeTasks=</span><br><span class="line">    mLockTaskPackages (userId:packages)=</span><br><span class="line">      u0:[]</span><br></pre></td></tr></table></figure><p>此时 <code>app1</code> 的 <code>taskid</code> 46 的<code>TaskRecord</code> 转移到了 栈顶</p><p>接下来返回销毁的逻辑就很清晰了。</p><p><img src="/2019/11/29/【重学Android读书笔记】Activity的任务栈与返回栈/log7.png" alt="log7"></p><p>最后退到 <code>launcher</code> 界面</p><p><strong><code>app1</code> 的 <code>TaskRecord</code> 转移到了 <code>app2</code> 的返回栈中</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;订阅 &lt;a href=&quot;https://xiaozhuanlan.com/topic/9074561823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;重学安卓&lt;/a&gt; 很久了，最近在整理读书笔记，在此记录之。&lt;/p&gt;
&lt;p&gt;在此隆重推荐这位大佬 KunMinX&lt;/p&gt;
&lt;p&gt;本文记录Activity任务栈与返回栈相关内容的疑问与探索&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://yoursite.com/categories/app/"/>
    
    
      <category term="app" scheme="http://yoursite.com/tags/app/"/>
    
      <category term="重学Android" scheme="http://yoursite.com/tags/%E9%87%8D%E5%AD%A6Android/"/>
    
  </entry>
  
  <entry>
    <title>【流水账】Xposed模块开发</title>
    <link href="http://yoursite.com/2019/08/30/%E3%80%90%E6%B5%81%E6%B0%B4%E8%B4%A6%E3%80%91Xposed%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/08/30/【流水账】Xposed模块开发/</id>
    <published>2019-08-30T09:18:57.000Z</published>
    <updated>2019-12-02T09:45:48.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 <code>how to</code> 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。</p><p>本篇博客是记录一些学习 <code>Xposed</code>模块开发时知识的整理。</p></blockquote><a id="more"></a><h3 id="开发前的准备工作"><a href="#开发前的准备工作" class="headerlink" title="开发前的准备工作"></a>开发前的准备工作</h3><p>查看 <a href="https://github.com/rovo89/XposedBridge/wiki/Using-the-Xposed-Framework-API" target="_blank" rel="noopener">Xposed-Framework-API</a> 根据文档进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly <span class="string">'de.robv.android.xposed:api:82'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AndroidManifest.xml</code> 中 <code>application</code> 标签下加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 应用为模块 --&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposedmodule"</span></span><br><span class="line">    android:value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;!-- 版本信息 该版本号与引用的依赖版本相同--&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposedminversion"</span></span><br><span class="line">    android:value=<span class="string">"82"</span> /&gt;</span><br><span class="line">&lt;!-- 模块描述 --&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposeddescription"</span></span><br><span class="line">    android:value=<span class="string">"Xposed Test"</span> /&gt;</span><br></pre></td></tr></table></figure><p>创建 <code>Hook</code> 类，该类是 <code>Xposed</code> 的入口类，用于拦截加载的 <code>package</code> ，实现 <code>IXposedHookLoadPackage</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyz.xposedtest;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> hook逻辑  </span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在 <code>src/main</code> 目录下创建assets目录，在该目录中创建 <code>xposed_ini</code> t文件，写入上面创建的 <code>Xposed</code> 的入口类，如下：</p><p><img src="/2019/08/30/【流水账】Xposed模块开发/%E5%85%A5%E5%8F%A3.png" alt="Xposed模块入口"></p><h3 id="XposedHelpers-常用方法"><a href="#XposedHelpers-常用方法" class="headerlink" title="XposedHelpers 常用方法"></a>XposedHelpers 常用方法</h3><h3 id="findAndHookMethod"><a href="#findAndHookMethod" class="headerlink" title="findAndHookMethod"></a>findAndHookMethod</h3><blockquote><p>Look up a method and hook it. The last argument must be the callback for the hook.</p></blockquote><p>最后一个参数主要有两种</p><p><code>XC_MethodHook</code> 在原有方法逻辑上添加逻辑，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在原有方法逻辑上添加逻辑</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 包名 2. classLoader 3. 方法名 4. 参数类型（没有则不添加） 5.Callback</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">XposedHelpers.findAndHookMethod(<span class="string">"cn.bcbook.kaixuetest.MainActivity"</span>,</span><br><span class="line">        lpparam.classLoader, <span class="string">"printViewId"</span>, View.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.beforeHookedMethod(param);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.i(<span class="string">"yyz"</span>, <span class="string">"afterHookedMethod hook success!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><code>XC_MethodReplacement</code> 替换原有方法逻辑，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换原有方法</span></span><br><span class="line">XposedHelpers.findAndHookMethod(<span class="string">"cn.bcbook.kaixuetest.MainActivity"</span>,</span><br><span class="line">        lpparam.classLoader, <span class="string">"printViewId"</span>, View.class, <span class="keyword">new</span> XC_MethodReplacement() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"yyz"</span>, <span class="string">"hook success!"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 &lt;code&gt;how to&lt;/code&gt; 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。&lt;/p&gt;
&lt;p&gt;本篇博客是记录一些学习 &lt;code&gt;Xposed&lt;/code&gt;模块开发时知识的整理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Xposed" scheme="http://yoursite.com/categories/Xposed/"/>
    
    
      <category term="Hook" scheme="http://yoursite.com/tags/Hook/"/>
    
      <category term="Xposed" scheme="http://yoursite.com/tags/Xposed/"/>
    
      <category term="流水账" scheme="http://yoursite.com/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>【流水账】iptables 常用指令</title>
    <link href="http://yoursite.com/2019/08/29/%E3%80%90%E6%B5%81%E6%B0%B4%E8%B4%A6%E3%80%91iptabels%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/08/29/【流水账】iptabels 常用指令/</id>
    <published>2019-08-29T02:10:35.000Z</published>
    <updated>2019-12-02T09:45:48.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 <code>how to</code> 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。</p><p>该文总结了 <code>iptables</code> 常用的指令。<code>iptables</code> 详细内容请看双印大佬 <a href="http://www.zsythink.net/archives/tag/iptables/page/2/" target="_blank" rel="noopener">iptables 详解系列</a></p></blockquote><a id="more"></a><h2 id="规则查询"><a href="#规则查询" class="headerlink" title="规则查询"></a>规则查询</h2><h3 id="查看指定表中的规则"><a href="#查看指定表中的规则" class="headerlink" title="查看指定表中的规则"></a>查看指定表中的规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -L</span><br></pre></td></tr></table></figure><p>使用 <code>-t</code> 选项，指定要操作的表，使用 <code>-L</code> 选项，查看-t选项对应的表的规则， <code>-L</code> 选项的意思是，列出规则。所以，上述命令的含义为列出filter表的所有规则。</p><p><code>filter</code> 可替换为 <code>raw</code> <code>mangle</code> <code>nat</code></p><p>如果仅查看 <code>filter</code> 可以省略 <code>-t filter</code> ，当没有使用 <code>-t</code> 选项指定表时，默认为操作 <code>filter</code> 表，即 <code>iptables -L</code> 表示列出 <code>filter</code> 表中的所有规则。</p><h3 id="查看指定表中的指定链的规则"><a href="#查看指定表中的指定链的规则" class="headerlink" title="查看指定表中的指定链的规则"></a>查看指定表中的指定链的规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT</span><br></pre></td></tr></table></figure><p>只查看 <code>filter</code> 表中 <code>INPUT</code> 链的规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -vL INPUT</span><br></pre></td></tr></table></figure><p>使用 <code>-v</code> 查看更多，更详细的信息</p><h3 id="不让ip进行反解"><a href="#不让ip进行反解" class="headerlink" title="不让ip进行反解"></a>不让ip进行反解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL</span><br></pre></td></tr></table></figure><p><code>iptables</code> 默认进行了名称解析，但是在规则非常多的情况下如果进行名称解析，效率会比较低。使用 <code>-n</code> 选项，表示不对 <code>ip</code> 地址进行名称反解，直接显示 <code>ip</code> 地址</p><p>只查看某个链的规则，并且不让 <code>ip</code> 进行反解，<code>iptables -nvL INPUT</code></p><h3 id="显示规则编号"><a href="#显示规则编号" class="headerlink" title="显示规则编号"></a>显示规则编号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables --line-number -nvL INPUT</span><br><span class="line">或</span><br><span class="line">iptables --line -nvL INPUT</span><br></pre></td></tr></table></figure><h2 id="规则管理"><a href="#规则管理" class="headerlink" title="规则管理"></a>规则管理</h2><h3 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h3><p><font color="#ff0000">注意：添加规则时，规则的顺序非常重要</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在指定表的指定链的尾部添加一条规则，-A选项表示在对应链的末尾添加规则</span><br><span class="line">命令语法：iptables -t 表名 -A 链名 匹配条件 -j 动作</span><br><span class="line">示例：iptables -t filter -A OUTPUT -s 192.168.10.225 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在指定表的指定链的首部添加一条规则，-I选型表示在对应链的开头添加规则</span><br><span class="line">命令语法：iptables -t 表名 -I 链名 匹配条件 -j 动作</span><br><span class="line">示例： iptables -t filter -I OUTPUT -s 192.168.10.225 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在指定表的指定链的指定位置添加一条规则</span><br><span class="line">命令语法：iptables -t 表名 -I 链名 规则序号 匹配条件 -j 动作</span><br><span class="line">示例： iptables -t filter -I OUTPUT 3 -s 192.168.10.225 -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置指定表的指定链的默认策略（默认动作），并非添加规则</span><br><span class="line">命令语法：iptables -t 表名 -P 链名 动作</span><br><span class="line">示例：iptables -t filter -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h3><p><font color="ff0000">注意：如果没有保存规则，删除规则时请慎重</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 按照规则序号删除规则，删除指定表的指定链的指定规则，-D选项表示删除对应链中的规则</span><br><span class="line">命令语法：iptables -t 表名 -D 链名 规则序号</span><br><span class="line">示例：iptables -t filter -D INPUT 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按照具体的匹配条件与动作删除规则，删除指定表的指定链的指定规则</span><br><span class="line">命令语法：iptables -t 表名 -D 链名 匹配条件 -j 动作</span><br><span class="line">示例：iptables -t filter -D INPUT -s 192.168.10.225 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除指定表的指定链中的所有规则，-F选项表示清空对应链中的规则</span><br><span class="line">命令语法：iptables -t 表名 -F 链名</span><br><span class="line">示例：iptables -t filter -F INPUT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除指定表中的所有规则</span><br><span class="line">命令语法：iptables -t 表名 -F</span><br><span class="line">示例：iptables -t filter -F OUTPUT</span><br></pre></td></tr></table></figure><h3 id="修改规则"><a href="#修改规则" class="headerlink" title="修改规则"></a>修改规则</h3><p><font color="ff0000">注意：如果使用-R选项修改规则中的动作，那么必须指明原规则中的原匹配条件，例如源ip，目标ip等</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改指定表中指定链的指定规则，-R选项表示修改对应链中的规则，使用-R选项时要同时指定对应的链以及规则对应的序号，并且规则中原本的匹配条件不可省略</span><br><span class="line">命令语法：iptables -t 表名 -R 链名 规则序号 规则原本的匹配条件 -j 动作</span><br><span class="line">示例：iptables -t filter -R INPUT 3 -s 192.168.10.225 -j ACCEPT</span><br></pre></td></tr></table></figure><p>上述示例表示修改 <code>filter</code> 表中 <code>INPUT</code> 链的第3条规则，将这条规则的动作修改为 <code>ACCEPT</code> ， <code>-s</code>  <code>192.168.10.225</code> 为这条规则中原本的匹配条件，如果省略此匹配条件，修改后的规则中的源地址可能会变为 <code>0.0.0.0/0</code></p><p>其他修改规则的方法：先通过编号删除规则，再在原编号位置添加一条规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改指定表的指定链的默认策略（默认动作），并非修改规则</span><br><span class="line">命令语法：iptables -t 表名 -P 链名 动作</span><br><span class="line">示例：iptables -t filter -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="保存规则"><a href="#保存规则" class="headerlink" title="保存规则"></a>保存规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 保存规则命令，表示将iptables规则保存至/etc/sysconfig/iptables文件中</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h2 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h2><h3 id="基本匹配条件"><a href="#基本匹配条件" class="headerlink" title="基本匹配条件"></a>基本匹配条件</h3><p><code>-s</code> 用于匹配报文的源地址,可以同时指定多个源地址，每个 <code>ip</code> 之间用逗号隔开，也可以指定为一个网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -s 192.168.10.111,192.168.10.225 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.0/24 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT ! -s 192.168.10.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><p><code>-d</code> 用于匹配报文的目标地址,可以同时指定多个目标地址，每个 <code>ip</code> 之间用逗号隔开，也可以指定为一个网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I OUTPUT -d 192.168.10.111,192.168.10.225 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -d 192.168.10.0/24 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT ! -d 192.168.10.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><p><code>-p</code> 用于匹配报文的协议类型,可以匹配的协议类型 <code>tcp</code> 、<code>udp</code> 、<code>udplite</code> 、<code>icmp</code> 、<code>esp</code> 、<code>ah</code> 、<code>sctp</code> 等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p tcp -s 192.168.10.146 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT ! -p udp -s 192.168.10.146 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="扩展匹配条件"><a href="#扩展匹配条件" class="headerlink" title="扩展匹配条件"></a>扩展匹配条件</h3><ol><li><p><code>tcp</code> 扩展模块</p><p><code>-p tcp -m tcp --sport</code> 用于匹配 <code>tcp</code> 协议报文的源端口，可以使用冒号指定一个连续的端口范围<br><code>-p tcp -m tcp --dport</code> 用于匹配 <code>tcp</code> 协议报文的目标端口，可以使用冒号指定一个连续的端口范围</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I OUTPUT -d 192.168.10.225 -p tcp -m tcp --sport 22 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m tcp --dport 22:25 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m tcp --dport :22 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m tcp --dport 80: -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.10.225 -p tcp -m tcp ! --sport 22 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p><code>multiport</code> 扩展模块</p><p><code>-p tcp -m multiport --sports</code> 用于匹配报文的源端口，可以指定离散的多个端口号,端口之间用”逗号”隔开<br><code>-p udp -m multiport --dports</code> 用于匹配报文的目标端口，可以指定离散的多个端口号，端口之间用”逗号”隔开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I OUTPUT -d 192.168.10.225 -p udp -m multiport --sports 137,138 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m multiport --dports 22,80 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m multiport ! --dports 22,80 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m multiport --dports 80:88 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.10.225 -p tcp -m multiport --dports 22,80:88 -j REJECT</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><code>udp</code> 模块</p><p><code>--sport</code> 匹配 <code>udp</code> 报文的源地址<br><code>--dport</code> 匹配 <code>udp</code> 报文的目标地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以结合multiport模块指定多个离散的端口</span><br><span class="line">iptables -t filter -I INPUT -p udp -m udp --dport 137 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT -p udp -m udp --dport 137:157 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><code>icmp</code> 模块</p><p><code>--icmp-type</code> 匹配 <code>icmp</code> 报文的具体类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8/0 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -p icmp --icmp-type 8 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p icmp -m icmp --icmp-type 0/0 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p icmp --icmp-type 0 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -p icmp --icmp-type "echo-request" -j REJECT</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p><code>iprange</code> 模块</p><p><code>--src-range</code> 指定连续的源地址范围<br><code>--dst-range</code> 指定连续的目标地址范围</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -m iprange --src-range 192.168.10.127-192.168.10.146 -j DROP</span><br><span class="line">iptables -t filter -I OUTPUT -m iprange --dst-range 192.168.10.127-192.168.10.146 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -m iprange ! --src-range 192.168.10.127-192.168.10.146 -j DROP</span><br></pre></td></tr></table></figure></li><li><p><code>stirng</code> 模块</p><p><code>--algo</code> 指定对应的匹配算法，可用算法为 <code>bm</code> 、<code>kmp</code>，此选项为必需选项。<br><code>--string</code> 指定需要匹配的字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p tcp --sport 80 -m string --algo bm --string "baidu" -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -p tcp --sport 80 -m string --algo bm --string "baidu" -j REJECT</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p><code>time</code> 模块 </p><p><code>--timestart</code> 用于指定时间范围的开始时间，不可取反<br><code>--timestop</code> 用于指定时间范围的结束时间，不可取反<br><code>--weekdays</code> 用于指定”星期几”，可取反<br><code>--monthdays</code> 用于指定”几号”，可取反<br><code>--datestart</code> 用于指定日期范围的开始日期，不可取反<br><code>--datestop</code> 用于指定日期范围的结束时间，不可取反</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 443 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 6,7 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --monthdays 22,23 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time ! --monthdays 22,23 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --timestart 09:00:00 --timestop 18:00:00 --weekdays 6,7 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 5 --monthdays 22,23,24,25,26,27,28 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --datestart 2017-12-24 --datestop 2017-12-27 -j REJECT</span><br></pre></td></tr></table></figure></li></ol><ol start="8"><li><p><code>connlimit</code> 模块</p><p><code>--connlimit-above</code> 单独使用此选项时，表示限制每个 <code>ip</code> 的链接数量。<br><code>--connlimit-mask</code>  此选项不能单独使用，在使用 <code>--connlimit-above</code> 选项时，配合此选项，则可以针对”某类 <code>ip</code> 段内的一定数量的 <code>ip</code> “进行连接数量的限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT</span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 20 --connlimit-mask 24 -j REJECT</span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 10 --connlimit-mask 27 -j REJECT</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p><code>limit</code> 模块</p><p><code>--limit-burst</code> 此选项用于指定令牌桶中令牌的最大数量<br><code>--limit</code> 此选项用于指定令牌桶中生成新令牌的频率，可用时间单位有second、minute 、hour、day</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p icmp -m limit --limit-burst 3 --limit 10/minute -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p icmp -j REJECT</span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义链"><a href="#自定义链" class="headerlink" title="自定义链"></a>自定义链</h2><h3 id="创建自定义链"><a href="#创建自定义链" class="headerlink" title="创建自定义链"></a>创建自定义链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在filter表中创建yyz自定义链</span><br><span class="line">iptables -N yyz</span><br></pre></td></tr></table></figure><h3 id="引用自定义链"><a href="#引用自定义链" class="headerlink" title="引用自定义链"></a>引用自定义链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在OUTPUT链中引用刚才创建的自定义链</span><br><span class="line">iptables -I OUTPUT -j yyz</span><br></pre></td></tr></table></figure><h3 id="重命名自定义链"><a href="#重命名自定义链" class="headerlink" title="重命名自定义链"></a>重命名自定义链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将yyz自定义链重命名为test</span><br><span class="line">iptabels -E yyz test</span><br></pre></td></tr></table></figure><h3 id="删除自定义链"><a href="#删除自定义链" class="headerlink" title="删除自定义链"></a>删除自定义链</h3><p>删除自定义链需要满足两个条件</p><ol><li>自定义链中没有被引用</li><li>自定义链中没有任何规则</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除引用计数为0且不包含任何规则的test链</span><br><span class="line">iptabels -X test</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 &lt;code&gt;how to&lt;/code&gt; 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。&lt;/p&gt;
&lt;p&gt;该文总结了 &lt;code&gt;iptables&lt;/code&gt; 常用的指令。&lt;code&gt;iptables&lt;/code&gt; 详细内容请看双印大佬 &lt;a href=&quot;http://www.zsythink.net/archives/tag/iptables/page/2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iptables 详解系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ROM" scheme="http://yoursite.com/categories/ROM/"/>
    
    
      <category term="流水账" scheme="http://yoursite.com/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
      <category term="ROM" scheme="http://yoursite.com/tags/ROM/"/>
    
      <category term="framework" scheme="http://yoursite.com/tags/framework/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
      <category term="网络黑白名单" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>【流水账】记录Framework开发的常用指令</title>
    <link href="http://yoursite.com/2019/08/16/%E3%80%90%E6%B5%81%E6%B0%B4%E8%B4%A6%E3%80%91%E8%AE%B0%E5%BD%95Framework%E5%BC%80%E5%8F%91%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/08/16/【流水账】记录Framework开发的常用指令/</id>
    <published>2019-08-16T06:11:46.000Z</published>
    <updated>2019-12-02T09:45:48.662Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 <code>how to</code> 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。</p><p>本篇博客是记录一些学习 <code>framework</code> 开发时知识的整理。</p></blockquote><a id="more"></a><h3 id="源码全盘编译指令"><a href="#源码全盘编译指令" class="headerlink" title="源码全盘编译指令"></a>源码全盘编译指令</h3><ol><li><code>source build/envsetup.sh</code></li><li>输入 <code>lunch</code> 同时选择欲编译的源码</li><li>编译指令：<code>make -j32 2&gt;&amp;1 | tee build_20190717_1724.log</code></li><li>编译后out目录可查看编译出的镜像</li></ol><p>前两步执行完毕即可执行 <code>mmm</code> 等命令，使用 <code>make clean</code>可以在编译前clean源码，该操作会导致编译时间边长。</p><h3 id="ROM烧录（mtk）"><a href="#ROM烧录（mtk）" class="headerlink" title="ROM烧录（mtk）"></a>ROM烧录（mtk）</h3><ol><li>打开 <code>flash_tool.exe</code></li><li>选择源码的配置文件</li><li>切换下载/全部格式化和下</li><li>点击下载，同时将已关机的设备连接电脑</li><li>等待红条，绿条，黄条走完烧录成功</li></ol><h3 id="ROM写号"><a href="#ROM写号" class="headerlink" title="ROM写号"></a>ROM写号</h3><ol><li>打开 <code>SN Writer.exe</code></li><li>点击 <code>System Config</code> 配置欲写哪些号，点击AP_DB进行配置文件，点击 <code>Save</code></li><li>点击 <code>Start</code> 将关机的设备连入电脑</li></ol><h3 id="源码检出"><a href="#源码检出" class="headerlink" title="源码检出"></a>源码检出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo-local init -u git://&#123;ip&#125;/shupai_android7.1/manifests.git &amp;&amp; repo-local sync -j8 &amp;&amp; repo-local start --all master</span><br></pre></td></tr></table></figure><p>{ip} 使用源码地址替换</p><h3 id="开机动画"><a href="#开机动画" class="headerlink" title="开机动画"></a>开机动画</h3><p><code>/system/media/</code></p><h3 id="重新打包-System-生成镜像"><a href="#重新打包-System-生成镜像" class="headerlink" title="重新打包 System 生成镜像"></a>重新打包 <code>System</code> 生成镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 snod</span><br></pre></td></tr></table></figure><h3 id="对-Settings-部分的修改"><a href="#对-Settings-部分的修改" class="headerlink" title="对 Settings 部分的修改"></a>对 <code>Settings</code> 部分的修改</h3><ol><li>移除某项（removePreference方法）</li><li>禁用某项 （配置enabled属性）</li><li>隐藏 <code>Settings</code> 主界面选项：<code>TileUtils</code></li></ol><h3 id="三大金刚键"><a href="#三大金刚键" class="headerlink" title="三大金刚键"></a>三大金刚键</h3><ol><li><code>HOME</code> 和  <code>BACK</code><br><code>PhoneWindowManager</code> 类 <code>interceptKeyBeforeDispatching</code> 方法<br>修改 <code>KEYCODE_HOME</code>  <code>KEYCODE_BACK</code> case 中的逻辑 </li><li><code>RECENT</code><br><code>src/com/android/systemui/recents/RecentsImpl</code> 类 <code>startRecentsActivity</code> 方法</li></ol><h3 id="预装应用"><a href="#预装应用" class="headerlink" title="预装应用"></a>预装应用</h3><p><code>device/mediatek/common device.mk</code></p><h3 id="关机-重启操作"><a href="#关机-重启操作" class="headerlink" title="关机 重启操作"></a>关机 重启操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base/services/core/java/com/android/server/policy/GloablActions PowerAction</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写博客是个好习惯，但是写的人水平参差不齐，我见过最搞笑的就是博文的内容是其他博客的链接。本着不误人子弟的原则，我写博客一向很克制。流水账系列是我平时的一些记录，是 &lt;code&gt;how to&lt;/code&gt; 类型的文章，网上相关的资料一搜一大把，仅供自己记录查找。&lt;/p&gt;
&lt;p&gt;本篇博客是记录一些学习 &lt;code&gt;framework&lt;/code&gt; 开发时知识的整理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ROM" scheme="http://yoursite.com/categories/ROM/"/>
    
    
      <category term="流水账" scheme="http://yoursite.com/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
      <category term="ROM" scheme="http://yoursite.com/tags/ROM/"/>
    
      <category term="framework" scheme="http://yoursite.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>多个项目添加依赖同一个模块</title>
    <link href="http://yoursite.com/2019/04/13/%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%90%8C%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2019/04/13/多个项目添加依赖同一个模块/</id>
    <published>2019-04-13T07:05:24.000Z</published>
    <updated>2019-12-02T09:45:48.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>android Studio  中的项目在正常引用module的时候是用复制到项目中的方式进行，单个项目调用还能适用，但是如果多个项目要引用同一个module的时候，如果module中进行了修改，那么每个项目中的module都要进行修改，这样增加了工作量，并且容易出现bug</p><p>因此我们需要引用module ，而不是复制module，实现方法如下</p></blockquote><a id="more"></a><p>新建项目 <code>TestBase</code>，在其 <code>app build.gradle</code> 中将 <code>apply plugin: &#39;com.android.application&#39;</code> 改为<code>apply plugin: &#39;com.android.library&#39;</code> 删除<code>applicationId</code> 配置项，将<code>module</code>名修改为<code>baselib</code>。</p><p>新建项目 <code>TestA</code> 在其<code>settings.gradle</code> 文件中加入下列代码。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">':baselib'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':baselib'</span>).projectDir=<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"../TestBase"</span>, <span class="string">'baselib'</span>)</span><br></pre></td></tr></table></figure><p>引用依赖时正常引用即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation project(&apos;:baselib&apos;)</span><br></pre></td></tr></table></figure><p>同步<code>gradle</code> ，此时我们发现<code>baselib</code>出现在<code>TestA</code>项目中。</p><p><img src="/2019/04/13/多个项目添加依赖同一个模块/TestA%E7%9B%AE%E5%BD%95.png" alt="TestA目录.png"></p><p>打开<code>TestA</code> 项目文件夹，我们发现了 <code>baselib</code> 文件夹，下面只有一个<code>baselib.iml</code>文件</p><p><img src="/2019/04/13/多个项目添加依赖同一个模块/TesA%E5%8E%9F%E7%9B%AE%E5%BD%95.png" alt="TesA原目录.png"></p><p>在<code>baselib</code>中加入<code>Utils</code> 工具类</p><p><img src="/2019/04/13/多个项目添加依赖同一个模块/baselib.png" alt="baselib.png"></p><p>切换到<code>TestBase</code>中查看，代码是相同的。</p><p><img src="/2019/04/13/多个项目添加依赖同一个模块/baselib.png" alt="TestBase目录.png"></p><p>这样就达到了<code>baselib</code>被修改后所有引用<code>baselib</code>的项目会同步变化。</p><h4 id="git-同步管理"><a href="#git-同步管理" class="headerlink" title="git 同步管理"></a>git 同步管理</h4><blockquote><p>上述操作都是基于本地的，那么如何加入git管理呢</p></blockquote><p>将<code>TestA</code>和<code>TestBase</code>分别传至<code>github</code></p><p>在<code>TestA</code>项目中打开<code>settings</code>，找到如下位置并将<code>TestBase</code>加入到<code>git</code>管理</p><p><img src="/2019/04/13/多个项目添加依赖同一个模块/%E6%B7%BB%E5%8A%A0git.png" alt="添加git.png"></p><p>然后就可以同步管理这两个项目啦<br><img src="/2019/04/13/多个项目添加依赖同一个模块/%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86.png" alt="同步管理.png"><br><img src="/2019/04/13/多个项目添加依赖同一个模块/gitlog.png" alt="git log.png"></p><p>参考：<br><a href="https://www.jianshu.com/p/47156a6be8ce" target="_blank" rel="noopener">https://www.jianshu.com/p/47156a6be8ce</a><br><a href="https://blog.csdn.net/saintcs/article/details/78567612" target="_blank" rel="noopener">https://blog.csdn.net/saintcs/article/details/78567612</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;android Studio  中的项目在正常引用module的时候是用复制到项目中的方式进行，单个项目调用还能适用，但是如果多个项目要引用同一个module的时候，如果module中进行了修改，那么每个项目中的module都要进行修改，这样增加了工作量，并且容易出现bug&lt;/p&gt;
&lt;p&gt;因此我们需要引用module ，而不是复制module，实现方法如下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://yoursite.com/categories/app/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="app" scheme="http://yoursite.com/tags/app/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Android反编译初探</title>
    <link href="http://yoursite.com/2017/07/06/Mac%E4%B8%8BAndroid%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/07/06/Mac下Android反编译初探/</id>
    <published>2017-07-06T08:46:14.000Z</published>
    <updated>2017-07-06T08:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作第四天，被要求学习逆向开发方面的知识，于是先将自己之前写的未经混淆的apk反编译，记录之。</p></blockquote><p><a href="http://blog.csdn.net/wj_november/article/details/51527286" target="_blank" rel="noopener">感谢该博文提供的思路</a></p><a id="more"></a><h3 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1. 工具准备"></a>1. 工具准备</h3><p><img src="http://upload-images.jianshu.io/upload_images/3155702-569189364ef992cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工具"></p><p>需要的三件套，<a href="http://download.csdn.net/detail/wj_november/9657372" target="_blank" rel="noopener">下载请戳</a></p><ol><li>AndroidCrackTool 用于反编译apk文件<br>与直接解压apk不同，用该工具获得的文件资源可以直接打开阅读，而直接解压得到的是字节码。</li><li>dex2jar 用于将.dex文件转为jar文件<br> 传统的Java程序经过编译，生成Java字节码保存在class文件中，Java虚拟机通过解码class文件中的内容来运行程序。而Dalvik虚拟机运行的是Davik字节码，所有的Davik字节码由Java字节码转换而来，并被打包到一个DEX（Dalvik Executable）可执行文件中，Dalvik虚拟机通过解释DEX文件来执行这些字节码。</li><li>jd-gui 用于阅读源码</li></ol><h3 id="2-开始工作"><a href="#2-开始工作" class="headerlink" title="2. 开始工作"></a>2. 开始工作</h3><p>使用AndroidCrackTool反编译apk，设置好目录点击执行按钮，出现end字样即成功。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-9dde0fe67fd84a07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译apk"><br>在这里可以查看一些资源文件</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-33d7aeb6f6b20770.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看资源文件"><br>将apk以普通解压的方式解压出来，找到其中的classes.dex文件，<br><img src="http://upload-images.jianshu.io/upload_images/3155702-46a0928132602efb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="classes.dex位置"><br>将其复制到dex2jar目录，使用终端进入dex2jar目录并执行如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>可以看到在dex2jar目录下生成了classes_dex2jar.jar的文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-a489b4dd84c84ecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="终端下操作"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-6c746a8c946c3275.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的classes_dex2jar.jar"><br>使用  jd-gui打开classes_dex2jar.jar即可看到源码，可以看到我的apk并没有混淆，所以名字都是正常的命名，经过混淆的名字大都是些字母。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-b7afdfda627a9e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阅读源码"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工作第四天，被要求学习逆向开发方面的知识，于是先将自己之前写的未经混淆的apk反编译，记录之。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/wj_november/article/details/51527286&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;感谢该博文提供的思路&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://yoursite.com/categories/app/"/>
    
    
      <category term="反编译" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Handler深入分析</title>
    <link href="http://yoursite.com/2017/07/04/Handler%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/07/04/Handler深入分析/</id>
    <published>2017-07-03T23:46:14.000Z</published>
    <updated>2017-07-03T23:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在android中我们可以有很多方式去实现异步，比如AsyncTask，Rxjava。不过它们底层都是使用的Handler，所以我们来研究一下Handelr的实现。</p></blockquote><a id="more"></a><h3 id="1-TreadLocal的使用"><a href="#1-TreadLocal的使用" class="headerlink" title="1. TreadLocal的使用"></a>1. TreadLocal的使用</h3><p>下面我们来写一个小demo，创建两个子线程，在两个子线程中分别为字符串result2，result3赋值，在主线程中调用两个子线程，并且为字符串result1赋值，最后打印输出结果。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-2e352e80d8f708cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主线程"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-3593c9860a191e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子线程1"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-106032139bef8248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子线程2"></p><p>最后我们看一下打印结果</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-0fded8b582305652.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试结果"></p><p>很明显，这不是我们想要的结果。看来线程之间相互影响了，那么有没有办法实现上述的功能呢？</p><p>当然有，我们可以使用 TreadLocal</p><blockquote><p>我们可以把TreadLocal看做成一个容器，调用其中的set和get方法，可以设值和取值。下面我们看看是如何实现的。</p></blockquote><p>首先创建一个ThreadLocal对象，并设置泛型为String<br><img src="http://upload-images.jianshu.io/upload_images/3155702-b274968c0d87042d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ThreadLocal"><br>这里不同的是首先将要打印的字串放入ThreadLocal中，然后从ThreadLocal中取出。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-b8a37fcc57787a3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主线程"></p><p>子线程的操作也是类似的。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-9b8b4a3c8f495526.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子线程"></p><p>下面我们看一下打印结果</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-71885237f2c74d29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><p>这样就完成了上述功能。那么这里说的ThreadLocal与Handler有什么关系呢？别急，往下看。</p><h3 id="2-在子线程中创建Handelr"><a href="#2-在子线程中创建Handelr" class="headerlink" title="2. 在子线程中创建Handelr"></a>2. 在子线程中创建Handelr</h3><p>我们在子线程中创建一个Handler对象，然后运行程序。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-4673d3b294d1ff08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子线程中创建Handler对象"></p><p>可以看到运行时出现了异常</p><blockquote><p> java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/3155702-42a0e89fbd6cfe2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常"><br>看字面意思是不能在调用Looper.prepare()之前在线程中创建handler。<br>那么我们在创建handler之前去调用Looper.prepare()。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-036e11a4312a1dd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="调用Looper.prepare()"><br>之后就能成功运行了。</p><p>那么我们来研究一下为什么会这样。<br>鼠标放在Handler()上，win按住control+鼠标左键，Mac按住command+鼠标左键。进入Handler的构造器。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-ddcf57bb316f4d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Handler构造器"><br>点击this</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-322cff8f6407b3f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更进一步"></p><p>我们找到了源头，如果looper为空则抛出这个异常。</p><p>在这里从looper里取出mQueue赋值给mQueue</p><p>然后我们看一下这个Looper.prepare方法，<br><img src="http://upload-images.jianshu.io/upload_images/3155702-8092676c88450ad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prepare"></p><p>上方的注释说得很清楚，在真正开始这个loop之前，该方法为你提供了创建引用这个looper的handelr的机会。在调用完该方法后，应该确保调用了loop()方法，并且使用quit()方法去结束它。</p><p>我们还看到如果多次调用prepare方法会抛出Only one Looper may be created per thread异常。<br>在这里我们看到了熟悉的身影，ThreadLocal。在这里使用ThreadLocal来存looper。</p><p>看到这我们不禁要问，在主线程我们并没有调用prepare方法啊，没错，在主线程使用的是prepareMainLooper<br><img src="http://upload-images.jianshu.io/upload_images/3155702-28263341bcc4e038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prepareMainLooper"><br>可以看到这个main looper已经被android environment创建了，所以不需要自己调用该方法。</p><p>下面我们来看一下在子线程中创建Handler的标准写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLooper</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            Looper.prepare();</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-Message的发送和处理过程"><a href="#3-Message的发送和处理过程" class="headerlink" title="3. Message的发送和处理过程"></a>3. Message的发送和处理过程</h3><p>Handler里提供了几个消息入队的方法</p><blockquote><p>post()<br>postAtTime()<br>postDelayed()<br>postAtFrontOfQueue()<br>sendMessageAtTime(Message msg , long uptimeMillis)</p></blockquote><p>其中post()，postAtTime()，postDelayed()都会直接或间接调用sendMessageAtTime方法。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-8f15bc3b507a098f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="post"><br><img src="http://upload-images.jianshu.io/upload_images/3155702-1b8a08501a2a9251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postAtTime"><br><img src="http://upload-images.jianshu.io/upload_images/3155702-c5ef6085b80726ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postDelayed"><br><img src="http://upload-images.jianshu.io/upload_images/3155702-dbe0fccf4cc81722.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sendMessageDelayed"><br>下面我们看一下sendMessageAtTime方法</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-678aac95b1c8ad85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sendMessageAtTime"></p><p>有两个参数，msg 和uptimeMillis ，如果消息队列为空，则打印警告，同时返回false。反之则调用enqueueMessage方法。</p><p>下面看一下enqueueMessage</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-ba4cd0593a2e8df7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="enqueueMessage"><br>这里有两个比较重要的操作。<br>msg.target赋值为this，有两层含义，一是message的来源是当前handler，二是当前的handler来处理消息。<br>将消息加入到消息队列中，既然是队列就有顺序，那么根据什么来判断顺序呢？就是根据uptimeMillis,这个时间，时间短就在前面，长就在后面。</p><p>细心的你可能发现刚刚我提到post()，postAtTime()，postDelayed()都会直接或间接调用sendMessageAtTime方法，那postAtFrontOfQueue()呢？<br>从字面上看该方法是将消息置于消息队列的最前边。是不是这样呢？我们看一下源码。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-76f2c74c7c0a3e51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postAtFrontOfQueue"><br>这里将入队的时间参数直接写死为0，那么肯定就是消息队列的最前边啦。</p><p>我们再来分析下入队之后的过程，上文提到调用Looper.prepare()方法后应调用Looper.loop()方法开始消息的轮询。那么我们看看loop方法做了些什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                Trace.traceEnd(traceTag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/3155702-5797c552356958b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="looper"><br>首先从ThreadLocal中取出looper并判断是否为空，之后将looper中的消息队列赋值，再然后进入一个死循环，循环内去不断寻找消息队列的下一项，没有消息发生阻塞。</p><p>找到 msg.target.dispatchMessage(msg);这一行，<br>之前我们提到target就是handler对象，这里handler把消息派发出去，接下来就进入消息的处理了。</p><p>进入到msg.target.dispatchMessage方法，<br><img src="http://upload-images.jianshu.io/upload_images/3155702-3d37b2fa8bb03c78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dispatchMessage"><br>这里分三步<br>1.判断msg的回调是否为空<br> 如果不为空则直接该回调自己处理，反之判断自己的回调</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-5cabf5368375e861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="message的回调"><br>把Runnable 封装成msg的callback</p><p>2.判断自己的回调是否为空<br>3.调用handleMessage方法</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-ad49dc188525989f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="handleMessage"><br>这里由子类重写来处理message</p><h3 id="4-Handler机制的总结"><a href="#4-Handler机制的总结" class="headerlink" title="4. Handler机制的总结"></a>4. Handler机制的总结</h3><blockquote><p>Thread 负责业务逻辑<br>Handler 负责发送消息和处理消息<br>MessageQueue 负责保存消息<br>Looper 负责轮询消息队列</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在android中我们可以有很多方式去实现异步，比如AsyncTask，Rxjava。不过它们底层都是使用的Handler，所以我们来研究一下Handelr的实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://yoursite.com/categories/app/"/>
    
    
      <category term="handler" scheme="http://yoursite.com/tags/handler/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>2.2从教务系统查询成绩并计算绩点——山东建筑大学为例</title>
    <link href="http://yoursite.com/2017/06/18/2-2%E4%BB%8E%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%9F%A5%E8%AF%A2%E6%88%90%E7%BB%A9%E5%B9%B6%E8%AE%A1%E7%AE%97%E7%BB%A9%E7%82%B9%E2%80%94%E2%80%94%E5%B1%B1%E4%B8%9C%E5%BB%BA%E7%AD%91%E5%A4%A7%E5%AD%A6%E4%B8%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/06/18/2-2从教务系统查询成绩并计算绩点——山东建筑大学为例/</id>
    <published>2017-06-18T15:57:00.000Z</published>
    <updated>2017-06-18T15:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前两天面试时被问到绩点是多少，但学校教务系统不提供绩点查询的功能，那么能不能写一个爬虫程序并计算出绩点呢？答案是肯定的！</p></blockquote><p> <a href="http://blog.csdn.net/pleasecallmewhy/article/details/9305229" target="_blank" rel="noopener">感谢该博客提供的思路</a></p><a id="more"></a><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>HttpFox插件，是一款http协议分析插件，分析页面请求和响应的时间、内容、以及浏览器用到的COOKIE等。是火狐浏览器的插件。谷歌浏览器和Safari都有自带的分析工具，可是感觉太复杂，没有这款好用。不过火狐浏览器对学校的教务系统兼容性不是很好，我还下载了IE tab插件。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-79a8f42d306c605c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件的安装"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-fdddcc6520d47f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>可以非常直观的查看相应的信息。<br>点击start是开始检测，点击stop暂停检测，点击clear清除内容。</p><h3 id="2-探究过程"><a href="#2-探究过程" class="headerlink" title="2. 探究过程"></a>2. 探究过程</h3><p>下面就去山东建筑大学官网登录到数字校园综合信息门户，看一看在登录的时候，到底发送了那些信息。<br>先来到登录页面，把httpfox打开，clear之后，点击start开启检测：</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-0a6c714e2c2ff3a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开启检测"><br>输入完账号密码，确保httpfox处于开启状态，然后点击登录。<br>这个时候可以看到，httpfox检测到了好多信息：<br><img src="http://upload-images.jianshu.io/upload_images/3155702-d757be497cda18ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="捕捉到的信息"></p><p>那么我们来分析一下这些数据</p><p>看起来红框里的两条数据比较有意思，先看看这个post</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-f72b7d8e3375dafc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="post数据"></p><p>PostData中我们看到了比较熟悉的词，username和password，学过java web的我们很清楚这段数据的含义，点击登录后将这用户名和你们提交到服务器比对。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-2a025613cb9cd840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重定向到这里"></p><p>可以看到这里使用get的方式在链接上以?的方式显示的加上了参数，跳转到信息门户。<br>我们的post的数据就发送到了这个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://urpe.sdjzu.edu.cn/loginPortalUrlForIndexLogin.portal</span><br></pre></td></tr></table></figure><p>需要的post数据是用户名密码，也就是说我们需要输入这两种数据来模拟登录过程。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-40ea67af08eb6ab1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入到教务系统"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-c30fa7de450e5621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击成绩查询"><br>进入教务系统后点击成绩查询，我们看到请求的地址为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://jwfw1.sdjzu.edu.cn/ssfw/jwnavmenu.do?menuItemWid=1E057E24ABAB4CAFE0540010E0235690</span><br></pre></td></tr></table></figure><p>我们整理一下整个过程的思路。</p><ol><li>POST学号和密码—&gt;然后返回cookie的值</li><li>发送cookie给服务器—&gt;返回页面信息。</li><li>获取到成绩页面的数据，用正则表达式将成绩和学分单独取出并计算加权平均数。</li></ol><p>ok，理顺思路后剩下的就只有编码问题了。</p><h3 id="3-实验"><a href="#3-实验" class="headerlink" title="3. 实验"></a>3. 实验</h3><p>我们先来实验下是否能够获得查询成绩界面的源码</p><p>我们先准备一个POST的数据，再准备一个cookie的接收，然后写出源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import cookielib</span><br><span class="line"></span><br><span class="line">cookie = cookielib.CookieJar()</span><br><span class="line">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))</span><br><span class="line"></span><br><span class="line"># 需要的POST数据</span><br><span class="line">postdata = urllib.urlencode(&#123;</span><br><span class="line">    &apos;userName&apos;: &apos;20140216064&apos;,</span><br><span class="line">    &apos;password&apos;: &apos;*********&apos;</span><br><span class="line">&#125;)</span><br><span class="line"># 自定义一个请求</span><br><span class="line">req1 = urllib2.Request(</span><br><span class="line">    url=&apos;http://urpe.sdjzu.edu.cn/loginPortalUrlForIndexLogin.portal&apos;,</span><br><span class="line">    data=postdata</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">req2 = urllib2.Request(</span><br><span class="line">    url=&apos;http://jwfw1.sdjzu.edu.cn/ssfw/jwnavmenu.do?menuItemWid=1E057E24ABAB4CAFE0540010E0235690&apos;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 访问登录链接</span><br><span class="line">opener.open(req1)</span><br><span class="line">result = opener.open(req2)</span><br><span class="line"># 打印返回的内容</span><br><span class="line">print result.read()</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/3155702-c2476106a0e29a70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><p>很棒呦，看来跟我们预期的一样。</p><h3 id="4-整理数据"><a href="#4-整理数据" class="headerlink" title="4. 整理数据"></a>4. 整理数据</h3><blockquote><p>获得了成绩查询界面的源码后我们需要将数据进行整理，获得我们想要的数据，课程名称，学分，成绩。</p></blockquote><p>将网页源码贴到Sublime Text中，方便我们查看源码</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-480626d6803e99fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分析源码"><br><img src="http://upload-images.jianshu.io/upload_images/3155702-6a978cc4d4c27ba1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分析源码"><br>通过查看源码我们看到从这个<div>开始到3640行都是关于成绩的代码，而成绩是存放在这个table标签下。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-b1573f6441632f38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="需要提取的信息"><br>红色框中分别为课程名，学分，以及成绩。这些是我们需要抽取出来的数据。<br>看到这里竟然有意外收获！注意黄色框被注释的部分，看来学校的教务系统有计算绩点的功能的，不知由于何种原因不用呢？</div></p><p>这里是这段程序中最困难的部分，我也踩了很多坑。我参照的博客是使用正则表达式来抽取想要的信息的，但我对正则表达式掌握的并不好，弄了好久也没写出合适的表达式，于是我果断放弃了使用正则表达式，采用BeautifulSoup来进行信息的筛选。<br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup用法参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 将内容从页面源码中提取出来</span><br><span class="line">   def deal_data(self, myPage):</span><br><span class="line"></span><br><span class="line">       soup = BeautifulSoup(myPage)</span><br><span class="line"></span><br><span class="line">       # 从title属性为有效成绩的标签中获取所有class属性为t_con的TAG(tr标签)</span><br><span class="line">       trs = soup.find(attrs=&#123;&quot;title&quot;: &quot;有效成绩&quot;&#125;).findAll(attrs=&#123;&quot;class&quot;: &quot;t_con&quot;&#125;)</span><br><span class="line"></span><br><span class="line">       # 从tr标签中的td标签中获取需要的信息。下标为3，7，8的分别为课程名，学分，成绩</span><br><span class="line">       for tr in trs:</span><br><span class="line">           for index, td in enumerate(tr.findAll(&apos;td&apos;)):  # enumerate能在for循环中使用下标</span><br><span class="line"></span><br><span class="line">               if index == 3:</span><br><span class="line">                   print td.text</span><br><span class="line">               elif index == 7:</span><br><span class="line">                   self.weights.append(td.text.encode(&apos;utf8&apos;))</span><br><span class="line">                   print td.text</span><br><span class="line">               elif index == 8:</span><br><span class="line">                   self.points.append(td.text.encode(&apos;utf8&apos;))</span><br><span class="line">                   print td.text</span><br><span class="line"></span><br><span class="line">           print</span><br></pre></td></tr></table></figure><p>整个逻辑我简单说一下，我觉得还可以改进。<br>首先查找title属性为”有效成绩“的标签，通过上文的截图我们可以知道这是那个div标签，之后在该div标签中定位class为t_con的tr标签。你也许会问为什么不直接定位到tr标签，因为后面的网页代码中还存在class 为t_con的tr标签，但不是我们需要的成绩。然后在每个tr标签下抽取下标为3，7，8的标签，这里我是把它存到数组里了。<br>接下来就清晰了，先打印成绩信息，然后计算绩点。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-f6d0aff398d0089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行截图"></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-3d48f5287d16407e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行截图"><br>学渣一个，绩点低请忽略。</p><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># encoding=utf8</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import cookielib</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">from BeautifulSoup import BeautifulSoup</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf8&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SDJZU_Crawler:</span><br><span class="line">    # 声明相关的属性</span><br><span class="line">    def __init__(self):</span><br><span class="line"></span><br><span class="line">        self.loginUrl = &apos;http://urpe.sdjzu.edu.cn/loginPortalUrlForIndexLogin.portal&apos;  # 登录的url</span><br><span class="line">        self.resultUrl = &apos;http://jwfw1.sdjzu.edu.cn/ssfw/jwnavmenu.do?menuItemWid=1E057E24ABAB4CAFE0540010E0235690&apos;  # 查询成绩的url</span><br><span class="line">        self.cookieJar = cookielib.CookieJar()  # 初始化一个CookieJar来处理Cookie的信息</span><br><span class="line">        self.postdata = urllib.urlencode(&#123;&apos;userName&apos;: &apos;&apos;, &apos;password&apos;: &apos;&apos;&#125;)  # 登录需要POST的数据</span><br><span class="line">        self.weights = []  # 存储权重，也就是学分</span><br><span class="line">        self.points = []  # 存储分数，也就是成绩</span><br><span class="line">        self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cookieJar))</span><br><span class="line"></span><br><span class="line">    def sdjzu_init(self):</span><br><span class="line">        username = raw_input(&apos;请输入学号:&apos;)  # 这里不要用input，二者区别请自行查询</span><br><span class="line">        password = raw_input(&apos;请输入密码:&apos;)</span><br><span class="line">        self.postdata = urllib.urlencode(&#123;&apos;userName&apos;: username, &apos;password&apos;: password&#125;)  # 将用户名密码加入到POST中</span><br><span class="line">        # 初始化链接并且获取cookie</span><br><span class="line">        myRequest = urllib2.Request(url=self.loginUrl, data=self.postdata)  # 自定义一个请求</span><br><span class="line">        result = self.opener.open(myRequest)  # 访问登录页面，获取到必须的cookie的值</span><br><span class="line">        result = self.opener.open(self.resultUrl)  # 访问成绩页面，获得成绩的数据</span><br><span class="line">        self.deal_data(result.read())</span><br><span class="line">        self.calculate_gpa()</span><br><span class="line"></span><br><span class="line">    # 将内容从页面源码中提取出来</span><br><span class="line">    def deal_data(self, myPage):</span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(myPage)</span><br><span class="line"></span><br><span class="line">        # 从title属性为有效成绩的标签中获取所有class属性为t_con的TAG(tr标签)</span><br><span class="line">        trs = soup.find(attrs=&#123;&quot;title&quot;: &quot;有效成绩&quot;&#125;).findAll(attrs=&#123;&quot;class&quot;: &quot;t_con&quot;&#125;)</span><br><span class="line"></span><br><span class="line">        # 从tr标签中的td标签中获取需要的信息。下标为3，7，8的分别为课程名，学分，成绩</span><br><span class="line">        for tr in trs:</span><br><span class="line">            for index, td in enumerate(tr.findAll(&apos;td&apos;)):  # enumerate能在for循环中使用下标</span><br><span class="line"></span><br><span class="line">                if index == 3:</span><br><span class="line">                    print td.text</span><br><span class="line">                elif index == 7:</span><br><span class="line">                    self.weights.append(td.text.encode(&apos;utf8&apos;))</span><br><span class="line">                    print td.text</span><br><span class="line">                elif index == 8:</span><br><span class="line">                    self.points.append(td.text.encode(&apos;utf8&apos;))</span><br><span class="line">                    print td.text</span><br><span class="line"></span><br><span class="line">            print</span><br><span class="line"></span><br><span class="line">    # 计算绩点，如果成绩还没出来，就不算该成绩，</span><br><span class="line">    def calculate_gpa(self):</span><br><span class="line">        point = 0.0  # 成绩</span><br><span class="line">        weight = 0.0  # 学分</span><br><span class="line">        for i in range(len(self.points)):</span><br><span class="line">            if self.points[i].isdigit() and (self.weights[i] != 0):</span><br><span class="line">                point += string.atof(self.points[i]) * string.atof(self.weights[i])  # 成绩*学分累加求和</span><br><span class="line">                weight += string.atof(self.weights[i])  # 学分累加求和</span><br><span class="line"></span><br><span class="line">        print &quot;绩点为：&quot;</span><br><span class="line">        print point / weight  # 输出绩点 值成绩*学分累加求和 / 学分累加求和</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">mySpider = SDJZU_Crawler()</span><br><span class="line">mySpider.sdjzu_init()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Flywith24" target="_blank" rel="noopener">我的github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天面试时被问到绩点是多少，但学校教务系统不提供绩点查询的功能，那么能不能写一个爬虫程序并计算出绩点呢？答案是肯定的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://blog.csdn.net/pleasecallmewhy/article/details/9305229&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;感谢该博客提供的思路&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>2.1开始第一个爬虫程序</title>
    <link href="http://yoursite.com/2017/06/18/2-1%E5%BC%80%E5%A7%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/06/18/2-1开始第一个爬虫程序/</id>
    <published>2017-06-18T02:05:00.000Z</published>
    <updated>2017-06-18T02:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装IDE以及hello-world"><a href="#1-安装IDE以及hello-world" class="headerlink" title="1. 安装IDE以及hello world"></a>1. 安装IDE以及hello world</h3><blockquote><p>一个优秀的IDE可以极大地提高工作效率，在这里我选择使用JetBrains公司的PyCharm。是不是有些眼熟？没错，IDEA 和Android Studio就是他们做的，JetBrains出品，必属精品。</p></blockquote><a id="more"></a><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击进入下载链接</a></p><p>点击download选择相应平台及版本，我这里选择的是社区版。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-752e691985633d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载界面"></p><p>安装过程，切换主题，调整字体之类的都跟跟IDEA类似，不需赘述。</p><p>那么开始我们的hello world程序吧。<br>新建一个Python file ，然后写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><p>第一次运行在工作区右击 run即可</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-4ffc1a9c05699113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="右击运行"><br>之后就会在Toolbar上显示run按钮了</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-a540d17991f6282d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行截图"><br>很棒有木有</p><h3 id="2-1-先爬他一个网页下来"><a href="#2-1-先爬他一个网页下来" class="headerlink" title="2.1 先爬他一个网页下来"></a>2.1 先爬他一个网页下来</h3><p>敲入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(&quot;http://www.baidu.com&quot;)</span><br><span class="line">print response.read()</span><br></pre></td></tr></table></figure><p>点击运行，我们可以得到结果</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-165b12f5711bcd47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个网页的源码被我们爬下来了，是不是很简单！</p><h3 id="2-2-分析代码"><a href="#2-2-分析代码" class="headerlink" title="2.2 分析代码"></a>2.2 分析代码</h3><p>下面我们来分析下这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br></pre></td></tr></table></figure><p>urllib2库是学习Python爬虫最基本的模块，利用这个模块我们可以得到网页的内容，并对内容用正则表达式提取分析，得到我们想要的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = urllib2.urlopen(&quot;http://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure><p>首先我们调用的是urllib2库里面的urlopen方法，传入一个URL，这个网址是百度首页，协议是HTTP协议，urlopen一般接受三个参数，它的参数如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-f03abc16265de8dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="urlopen参数"></p><p>第一个参数url即为URL，第二个参数data是访问URL时要传送的数据，第三个timeout是设置超时时间。</p><p>第二三个参数是可以不传送的，data默认为空None，timeout默认为 socket._GLOBAL_DEFAULT_TIMEOUT</p><p>第一个参数URL是必须要传送的，在这个例子里面我们传送了百度的URL，执行urlopen方法之后，返回一个response对象，返回信息便保存在这里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print response.read()</span><br></pre></td></tr></table></figure><p>response对象有一个read方法，可以返回获取到的网页内容</p><h3 id="2-3-构造Request"><a href="#2-3-构造Request" class="headerlink" title="2.3 构造Request"></a>2.3 构造Request</h3><p>上面的urlopen参数可以传入一个request请求,它其实就是一个Request类的实例，构造时需要传入Url,Data等等的内容。我们可以将上面的代码改写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(&quot;http://www.baidu.com&quot;)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">print response.read()</span><br></pre></td></tr></table></figure><p>运行结果是完全一样的，只不过中间多了一个request对象，推荐大家这么写，因为在构建请求时还需要加入好多内容，通过构建一个request，服务器响应请求得到应答，这样显得逻辑上清晰明确。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装IDE以及hello-world&quot;&gt;&lt;a href=&quot;#1-安装IDE以及hello-world&quot; class=&quot;headerlink&quot; title=&quot;1. 安装IDE以及hello world&quot;&gt;&lt;/a&gt;1. 安装IDE以及hello world&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个优秀的IDE可以极大地提高工作效率，在这里我选择使用JetBrains公司的PyCharm。是不是有些眼熟？没错，IDEA 和Android Studio就是他们做的，JetBrains出品，必属精品。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>1.1使用函数</title>
    <link href="http://yoursite.com/2017/06/05/1-1%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/06/05/1-1使用函数/</id>
    <published>2017-06-05T13:58:00.000Z</published>
    <updated>2017-06-05T13:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们编程时很容易疲劳，所以让我们来设计一个可以在一段时间后提醒你休息的小程序。比如每隔两个小时打开<a href="http://lines.frvr.com" target="_blank" rel="noopener">http://lines.frvr.com</a> 此网站来玩一会儿小游戏。</p></blockquote><a id="more"></a><p>让我们来分析下需要哪些步骤<br>我们首先要让程序等待两个小时，在需要休息的时候打开浏览器并转到这个小游戏的网站。也许我们一天要休息多次，所以我们需要一个循环来让其实现多次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 等待两小时</span><br><span class="line">2. 打开浏览器</span><br><span class="line">重复</span><br></pre></td></tr></table></figure><p>现在，让我们开始吧~</p><p>首先让我们google一下如何用Python来打开浏览器<br><img src="http://upload-images.jianshu.io/upload_images/3155702-ec11c33f9934a657.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询Pyhon如何打开浏览器"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webbrowser.open(&quot;http://lines.frvr.com&quot;)</span><br></pre></td></tr></table></figure><p>可以看到上述代码可以使用默认浏览器打开指定网页。</p><p>让我们试试吧~<br><img src="http://upload-images.jianshu.io/upload_images/3155702-ebeadc44e9ed109a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保存"><br>保存并执行</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-07994ea86762efd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行截图"></p><p>出现了错误，不过学过java的你肯定能看懂是什么原因。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-5f2951beae5bec8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修正"><br>导入webbrowser模块就可以正常运行了，不要被这个网站的小游戏吸引走哦，我们还没有结束。</p><p>下面我们看看Python如何能让程序等待2小时，为了方便测试，我们把等待时间设置为3秒</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-0690b4988c6f6ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python让程序等待"></p><p>可以看到使用time.sleep()方法可以是程序等待一段时间执行，参数以秒为单位<br>所以我们在程序中添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(3)</span><br></pre></td></tr></table></figure><p>当然也要导入相应模块。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-3d2bb6b60a4ff0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>很简单有没有？</p><p>接下来我们来让其循环3次</p><p>输入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import webbrowser</span><br><span class="line">import time</span><br><span class="line">total_breaks = 3</span><br><span class="line">break_count = 0</span><br><span class="line"></span><br><span class="line">print(&quot;This program started on&quot; + time.ctime())</span><br><span class="line">while(break_count &lt; total_breaks):</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    webbrowser.open(&quot;http://lines.frvr.com&quot;)</span><br><span class="line">    break_count = break_count + 1</span><br></pre></td></tr></table></figure><p>代码很简单，首先我们定义了总的休息次数为3，我们又定义了已休息次数初始值为0。接下来是一个while循环，当已休息次数小于总休息次数时执行循环体。最后将已休息次数加1。</p><p>值得注意的是while循环并没有花括号。</p><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if True:</span><br><span class="line">    print &quot;True&quot;</span><br><span class="line">else:</span><br><span class="line">  print &quot;False&quot;</span><br></pre></td></tr></table></figure><p>以下代码将会执行错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"># 文件名：test.py</span><br><span class="line"> if True:</span><br><span class="line">    print &quot;Answer&quot;</span><br><span class="line">    print &quot;True&quot;</span><br><span class="line">else:</span><br><span class="line">    print &quot;Answer&quot;</span><br><span class="line">    # 没有严格缩进，在执行时会报错</span><br><span class="line">  print &quot;False&quot;</span><br></pre></td></tr></table></figure><p>执行以上代码，会出现如下错误提醒：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python test.py  </span><br><span class="line">  File &quot;test.py&quot;, line 5</span><br><span class="line">    if True:</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><p> IndentationError: unexpected indent 错误是 python 编译器是在告诉你”Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题”，所有 python 对格式要求非常严格。<br>如果是 IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。<br>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。<br>建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们编程时很容易疲劳，所以让我们来设计一个可以在一段时间后提醒你休息的小程序。比如每隔两个小时打开&lt;a href=&quot;http://lines.frvr.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lines.frvr.com&lt;/a&gt; 此网站来玩一会儿小游戏。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>0.从零开始，Python的安装</title>
    <link href="http://yoursite.com/2017/06/05/0-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8CPython%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/06/05/0-从零开始，Python的安装/</id>
    <published>2017-06-05T13:09:00.000Z</published>
    <updated>2017-06-05T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这学期计算机网络课程有一个课程设计，要求使用Python写一个小程序。之前也没接触过Python，从优达学城里看到一个关于Python的课程，在此记录。</p></blockquote><a id="more"></a><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>下载地址：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></p><hr><p><img src="http://upload-images.jianshu.io/upload_images/3155702-837d626cf0404cc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤1"></p><p>确保安装了 pip 并且 Python 添加到了你的 PATH。</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-1ce43800911a180c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-9bccbfe4b2d0e766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤2"></p><p>要检查安装是否成功，打开 IDLE（Python 安装的一款程序，使你能够轻松地编辑和运行 Python 代码）。</p><p>a) Windows 7（及更早版本）：依次点击“开始”菜单&gt;“所有程序”&gt;“Python 2.7”，最后选择 IDLE (Python GUI)。</p><p>b) Windows 8/10：搜索 IDLE。目前，你可以从屏幕右侧向左滑动或用鼠标点击屏幕的右下角进行搜索。</p><hr><h3 id="MAC安装"><a href="#MAC安装" class="headerlink" title="MAC安装"></a>MAC安装</h3><p>要在 Mac 机器上安装 Python，你可以采用两种方法：在命令行中使用 Homebrew，或在官网上找到普通的 Python 安装程序。</p><p>方法 1：程序包安装程序<br>安装地址：<a href="https://www.python.org/downloads/release/python-2713/" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-2713/</a><br>检查是否安装成功</p><p>a) IDLE 应该位于您的应用程序文件夹中。<br><img src="http://upload-images.jianshu.io/upload_images/3155702-746f86c26858feec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>b)通过按下 ⌘+空格键，打开 Spotlight ，并输入“idle”来查找 IDLE</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-327506f6845e4d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>以下是它在我们的计算机上运行的屏幕截图！</p><p><img src="http://upload-images.jianshu.io/upload_images/3155702-f5b789535b05b7ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>方法 2：Homebrew<br>要通过 Homebrew 安装 Python，只需执行以下两步：</p><p>打开终端，并输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”。</span><br></pre></td></tr></table></figure><p>安装过程中，系统会多次发出提示 。<br>安装完 Homebrew 后，你可以通过在命令行中输入 brew help，验证一切是否正常。现在输入 brew install python 获取 Python 2 的最新版本。这样就可以了！</p><p>通过在命令行里输入 python 即可验证 Python 是否安装正确。系统应该欢迎你使用 Python Shell。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这学期计算机网络课程有一个课程设计，要求使用Python写一个小程序。之前也没接触过Python，从优达学城里看到一个关于Python的课程，在此记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
